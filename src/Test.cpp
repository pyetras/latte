/*** Compiler Front-End Test automatically generated by the BNF Converter ***/
/*                                                                          */
/* This test will parse a file, print the abstract syntax tree, and then    */
/* pretty-print the result.                                                 */
/*                                                                          */
/****************************************************************************/
#include <stdio.h>
#include "Parser.H"
#include "Printer.H"
#include "Absyn.H"

#include <iostream>
#include "BasicType.h"
#include "FunctionType.h"
#include "RootEnvironment.h"
#include "Typechecker.h"
#include "LLVMCompiler.h"

using namespace std;

int main(int argc, char ** argv)
{
//  LType::ptr t1 = BasicType::getBool(), t2 = BasicType::getBool(), t3 = BasicType::getInt();
//  LType *t4 = new FunctionType(t1, 2, &(*t2), &(*t3));
//  LType *t5 = new FunctionType(t1, 2, &(*t2), &(*t3));
//  LType *t6 = new FunctionType(t1, 1, &(*t2));
//  Environment *env = new RootEnvironment();
//  env = env->push(BasicType::getBool());
//  cout << env->hasKey("printString") << endl;
//  cout << env->hasKey("printStrings") << endl;
//  env = env->pop();
//  delete env;
//  
//  cout << (*t1 == *t2) << " " << (*t2 == *t3) << " " << (*t4 == *t5) << (*t1 == *t4) << (*t5 == *t6) << endl;
  FILE *input;
  if (argc > 1) 
  {
    input = fopen(argv[1], "r");
    if (!input)
    {
      fprintf(stderr, "Error opening input file.\n");
      exit(1);
    }
  }
  else input = stdin;
  /* The default entry point is used. For other options see Parser.H */
  Program *parse_tree = pProgram(input);
  if (parse_tree)
  {
    Typechecker typ;
    typ.typecheck(parse_tree);
    
//    printf("\nParse Succesful!\n");
//    printf("\n[Abstract Syntax]\n");
//    ShowAbsyn *s = new ShowAbsyn();
//    printf("%s\n\n", s->show(parse_tree));
//    printf("[Linearized Tree]\n");
//    PrintAbsyn *p = new PrintAbsyn();
//    printf("%s\n\n", p->print(parse_tree));
    
    LLVMCompiler compiler;
    std::cout << compiler.compile(parse_tree, "lattest");
    
    return 0;
  }
  return 1;
}

